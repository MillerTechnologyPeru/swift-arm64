From 10d15b8badaf9add7cdc164f127821bc4fc59b0e Mon Sep 17 00:00:00 2001
From: Saleem Abdulrasool <compnerd@compnerd.org>
Date: Sat, 30 May 2020 17:02:16 -0700
Subject: [PATCH 1/2] build: switch gyb to Python3

Change the build system to invoke gyb with python3 instead of python2.
---
 cmake/modules/AddSwift.cmake              | 2 +-
 cmake/modules/SwiftHandleGybSources.cmake | 4 +---
 2 files changed, 2 insertions(+), 4 deletions(-)

diff --git a/cmake/modules/AddSwift.cmake b/cmake/modules/AddSwift.cmake
index cbef2b8534d4..475b6f7cf1e8 100644
--- a/cmake/modules/AddSwift.cmake
+++ b/cmake/modules/AddSwift.cmake
@@ -23,7 +23,7 @@ function(_swift_gyb_target_sources target scope)
 
     add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${generated}
       COMMAND
-        $<TARGET_FILE:Python2::Interpreter> ${SWIFT_SOURCE_DIR}/utils/gyb -D CMAKE_SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P} ${SWIFT_GYB_FLAGS} -o ${CMAKE_CURRENT_BINARY_DIR}/${generated}.tmp ${absolute}
+        $<TARGET_FILE:Python3::Interpreter> ${SWIFT_SOURCE_DIR}/utils/gyb -D CMAKE_SIZEOF_VOID_P=${CMAKE_SIZEOF_VOID_P} ${SWIFT_GYB_FLAGS} -o ${CMAKE_CURRENT_BINARY_DIR}/${generated}.tmp ${absolute}
       COMMAND
         ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/${generated}.tmp ${CMAKE_CURRENT_BINARY_DIR}/${generated}
       COMMAND
diff --git a/cmake/modules/SwiftHandleGybSources.cmake b/cmake/modules/SwiftHandleGybSources.cmake
index f8dc984ea0c6..e74489f56989 100644
--- a/cmake/modules/SwiftHandleGybSources.cmake
+++ b/cmake/modules/SwiftHandleGybSources.cmake
@@ -1,8 +1,6 @@
 include(SwiftAddCustomCommandTarget)
 include(SwiftSetIfArchBitness)
 
-find_package(Python2 COMPONENTS Interpreter REQUIRED)
-
 # Create a target to process single gyb source with the 'gyb' tool.
 #
 # handle_gyb_source_single(
@@ -60,7 +58,7 @@ function(handle_gyb_source_single dependency_out_var_name)
       COMMAND
           "${CMAKE_COMMAND}" -E make_directory "${dir}"
       COMMAND
-          "$<TARGET_FILE:Python2::Interpreter>" "${gyb_tool}" ${SWIFT_GYB_FLAGS} ${GYB_SINGLE_FLAGS} -o "${GYB_SINGLE_OUTPUT}.tmp" "${GYB_SINGLE_SOURCE}"
+          "$<TARGET_FILE:Python3::Interpreter>" "${gyb_tool}" ${SWIFT_GYB_FLAGS} ${GYB_SINGLE_FLAGS} -o "${GYB_SINGLE_OUTPUT}.tmp" "${GYB_SINGLE_SOURCE}"
       COMMAND
           "${CMAKE_COMMAND}" -E copy_if_different "${GYB_SINGLE_OUTPUT}.tmp" "${GYB_SINGLE_OUTPUT}"
       COMMAND

From 4240a90b879d0902698cb549641b9733888c8ebc Mon Sep 17 00:00:00 2001
From: Saleem Abdulrasool <compnerd@compnerd.org>
Date: Fri, 19 Jun 2020 11:02:10 -0700
Subject: [PATCH 2/2] gyb: make SyntaxSupport python 3 friendly

This adjusts the code to run identically under python 2 and python 3.
We would previously fail to digest the content in Python 3 as the `map`
is not equivalent.  This now results in the same encoding as Python 2.
---
 utils/gyb_syntax_support/__init__.py | 58 ++++++++++++++--------------
 1 file changed, 30 insertions(+), 28 deletions(-)

diff --git a/utils/gyb_syntax_support/__init__.py b/utils/gyb_syntax_support/__init__.py
index 1f58d26dbfe6..3795b62d847d 100644
--- a/utils/gyb_syntax_support/__init__.py
+++ b/utils/gyb_syntax_support/__init__.py
@@ -144,34 +144,36 @@ def dedented_lines(description):
     return textwrap.dedent(description).split('\n')
 
 
-def digest_syntax_node(digest, node):
-    # Hash into the syntax name and serialization code
-    digest.update(node.name)
-    digest.update(str(get_serialization_code(node.syntax_kind)))
-    for child in node.children:
-        # Hash into the expected child syntax
-        digest.update(child.syntax_kind)
-        # Hash into the child name
-        digest.update(child.name)
-        # Hash into whether the child is optional
-        digest.update(str(child.is_optional))
-
-
-def digest_syntax_token(digest, token):
-    # Hash into the token name and serialization code
-    digest.update(token.name)
-    digest.update(str(token.serialization_code))
-
-
-def digest_trivia(digest, trivia):
-    digest.update(trivia.name)
-    digest.update(str(trivia.serialization_code))
-    digest.update(str(trivia.characters))
-
-
 def calculate_node_hash():
     digest = hashlib.sha1()
-    map(lambda node: digest_syntax_node(digest, node), SYNTAX_NODES)
-    map(lambda token: digest_syntax_token(digest, token), SYNTAX_TOKENS)
-    map(lambda trivia: digest_trivia(digest, trivia), TRIVIAS)
+
+    def _digest_syntax_node(node):
+        # Hash into the syntax name and serialization code
+        digest.update(node.name.encode("utf-8"))
+        digest.update(str(get_serialization_code(node.syntax_kind)).encode("utf-8"))
+        for child in node.children:
+            # Hash into the expected child syntax
+            digest.update(child.syntax_kind.encode("utf-8"))
+            # Hash into the child name
+            digest.update(child.name.encode("utf-8"))
+            # Hash into whether the child is optional
+            digest.update(str(child.is_optional).encode("utf-8"))
+
+    def _digest_syntax_token(token):
+        # Hash into the token name and serialization code
+        digest.update(token.name.encode("utf-8"))
+        digest.update(str(token.serialization_code).encode("utf-8"))
+
+    def _digest_trivia(trivia):
+        digest.update(trivia.name.encode("utf-8"))
+        digest.update(str(trivia.serialization_code).encode("utf-8"))
+        digest.update(str(trivia.characters).encode("utf-8"))
+
+    for node in SYNTAX_NODES:
+        _digest_syntax_node(node)
+    for token in SYNTAX_TOKENS:
+        _digest_syntax_token(token)
+    for trivia in TRIVIAS:
+        _digest_trivia(trivia)
+
     return digest.hexdigest()
