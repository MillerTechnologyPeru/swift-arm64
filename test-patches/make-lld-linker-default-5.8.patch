diff --git a/CMakeLists.txt b/CMakeLists.txt
index b6d35ff781d..ebfb9580886 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -792,20 +792,20 @@ endif()
 # Which default linker to use. Prefer LLVM_USE_LINKER if it set, otherwise use
 # our own defaults. This should only be possible in a unified (not stand alone)
 # build environment.
+set(SWIFT_USE_LINKER_default "lld")
+
 if(LLVM_USE_LINKER)
   set(SWIFT_USE_LINKER_default "${LLVM_USE_LINKER}")
 elseif(${SWIFT_HOST_VARIANT_SDK} STREQUAL ANDROID)
-  set(SWIFT_USE_LINKER_default "lld")
+  # Keep the default "lld"
 elseif(CMAKE_SYSTEM_NAME STREQUAL Windows AND NOT CMAKE_HOST_SYSTEM_NAME STREQUAL Windows)
-  set(SWIFT_USE_LINKER_default "lld")
+  # Keep the default "lld"
 elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin)
   set(SWIFT_USE_LINKER_default "")
-else()
-  set(SWIFT_USE_LINKER_default "gold")
 endif()
+
 set(SWIFT_USE_LINKER ${SWIFT_USE_LINKER_default} CACHE STRING
     "Build Swift with a non-default linker")
-
 #
 # Enable additional warnings.
 #
diff --git a/lib/Driver/UnixToolChains.cpp b/lib/Driver/UnixToolChains.cpp
index 389afb821dd..bed8453ceaf 100644
--- a/lib/Driver/UnixToolChains.cpp
+++ b/lib/Driver/UnixToolChains.cpp
@@ -85,32 +85,25 @@ ToolChain::InvocationInfo toolchains::GenericUnix::constructInvocation(
 }
 
 std::string toolchains::GenericUnix::getDefaultLinker() const {
-  if (getTriple().isAndroid())
+  std::set<llvm::Triple::ArchType> lldArchs = {
+    llvm::Triple::arm,
+    llvm::Triple::aarch64,
+    llvm::Triple::aarch64_32,
+    llvm::Triple::armeb,
+    llvm::Triple::thumb,
+    llvm::Triple::thumbeb,
+    llvm::Triple::x86,
+    llvm::Triple::x86_64,
+    llvm::Triple::ppc64,
+    llvm::Triple::ppc64le,
+    llvm::Triple::systemz
+  };
+
+  if (getTriple().isAndroid() || lldArchs.count(getTriple().getArch()))
     return "lld";
 
-  switch (getTriple().getArch()) {
-  case llvm::Triple::arm:
-  case llvm::Triple::aarch64:
-  case llvm::Triple::aarch64_32:
-  case llvm::Triple::armeb:
-  case llvm::Triple::thumb:
-  case llvm::Triple::thumbeb:
-    // BFD linker has issues wrt relocation of the protocol conformance
-    // section on these targets, it also generates COPY relocations for
-    // final executables, as such, unless specified, we default to gold
-    // linker.
-    return "gold";
-  case llvm::Triple::x86:
-  case llvm::Triple::x86_64:
-  case llvm::Triple::ppc64:
-  case llvm::Triple::ppc64le:
-  case llvm::Triple::systemz:
-    // BFD linker has issues wrt relocations against protected symbols.
-    return "gold";
-  default:
-    // Otherwise, use the default BFD linker.
-    return "";
-  }
+  // Otherwise, use the default BFD linker.
+  return "";
 }
 
 bool toolchains::GenericUnix::addRuntimeRPath(const llvm::Triple &T,
